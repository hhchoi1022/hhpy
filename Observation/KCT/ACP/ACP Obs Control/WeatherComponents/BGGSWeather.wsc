<?xml version="1.0" ?>
<package>
	<comment>
<![CDATA[
'tabs=4
-----------------------------------------------------------------------------------------

Brisbane Girls Grammar School Observatories Weather Server for ACP
==================================================================

Script:         BGGSWeather.wsc
Author:         Robert B. Denny <rdenny@dc3.com>
Version:        8.1.0  (CHANGE CONSTANT SVR_VERSION BELOW)
Requires:       ACP 8.1 or later
                Windows Script 5.6 or later (installed by ACP setup)


Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                provides ACP and its scripts with Weather information. This component
                is responsible for providing the interface with the weather sensor,
                which is does by reading the 1-line log file produced by the Boltwood
                Clarity software. The weather safe/unsafe value is based on the BGGS
                roof status file. Thus, if the roof is open, this server reports weather
                safe, and if closed, it reports unsafe. 

Usage:          In ACP Preferences, Weather tab, select ACP.BGGSWeather as the server
                ID, then click Setup... and select the 1-line log file that is produced
                by the Boltwood-like sky sensor software, followed by the 1-line roof
                status file furnished by M1-OAsys at Deep Sky West.
                
Edit History:
    07-Dec-17   Initial Edit including new GUID, adapted from DSW Weather server!
-----------------------------------------------------------------------------------------
]]>
	</comment>
	<component id="BGGSWeather">
		<?component error="false" debug="false" ?>
		<registration progid="ACP.BGGSWeather" classid="{4506BC5C-D868-4DEE-BF6F-8F8197522455}" description="ACP weather server for Brisbane Girls Grammar School Observatories" remotable="no" version="1.0">
		</registration>
		<public>
			<method name="SetupDialog">
			</method>
			<property name="Connected">
				<get/>
				<put/>
			</property>
			<property name="AmbientTemperature">
				<get/>
			</property>
			<property name="BarometricPressure">
				<get/>
			</property>
			<property name="Clouds">
				<get/>
			</property>
			<property name="DewPoint">
				<get/>
			</property>
			<property name="InsideTemperature">
				<get/>
			</property>
			<property name="Name">
				<get/>
			</property>
			<property name="Precipitation">
				<get/>
			</property>
			<property name="RelativeHumidity">
				<get/>
			</property>
			<property name="Safe">
				<get/>
			</property>
			<property name="SkyTemperature">
				<get/>
			</property>
			<property name="WindDirection">
				<get/>
			</property>
			<property name="WindVelocity">
				<get/>
			</property>
		</public>
		<object id="FileDialog" progid="ACP.FileDialog" events="false" reference="true"/>
		<object id="Util" progid="ACP.Util" events="false" reference="true"/>
		<object id="FSO" progid="Scripting.FileSystemObject" events="false" reference="false"/>
		<script id="WeatherAccess" language="VBScript">
<![CDATA[
Option Explicit

Const SVR_VERSION = "8.1.0"
Const ERR_SOURCE = "ACP.BGGSWeather"
Const PRP = "Property "				' Common bits for error messages
Const NTI = " is not implemented"
'
' Polling interval, do not attempt to read file more often than this
'
Const POLL_INT = #00:00:15#
'
' Turn this on to have detailed tracing to a log file
'
Const DIAG_TRACE = True

'
' Manifest constants from Clarity II
'
Const cloudUnknown = 0
Const cloudClear = 1
Const cloudCloudy = 2
Const cloudVeryCloudy = 3
Const windUnknown = 0
Const windCalm = 1
Const windWindy = 2
Const windVeryWindy = 3
Const rainUnknown = 0
Const rainDry = 1
Const rainWet = 2      'sensor has water on it
Const rainRain = 3     'falling rain drops detected
Const dayUnknown = 0
Const dayDark = 1
Const dayLight = 2
Const dayVeryLight = 3

'
' State variables
'
Dim c_sTraceFileName                                        ' Full path to trace diagnostic log file
Dim c_oTraceFileStream                                      ' Text stream into which trace info is written
Dim c_sLogFileName                                          ' Full path/name of Clarity log file
Dim c_sRoofFileName                                         ' Full path/name of the BGGS roof status file
Dim c_bConnected
Dim c_dtLastLogTime
Dim c_dtLastRoofTime
Dim c_iSecondsSinceData
Dim c_fAmbientTemp
Dim c_fSkyTemp
Dim c_fWindSpeed
Dim c_fHumidity
Dim c_fDewPoint
Dim c_iRainFlag
Dim c_iWetFlag
Dim c_iCloudCond
Dim c_iWindCond
Dim c_iRainCond
Dim c_bBGGSRoofOpen
Dim c_bLastSafe
Dim c_iDayCond
Dim c_sMyDocsFolder 
'
' See PollWxIf() & PollRfIf()
'
Dim c_dtLastWxPollTime
Dim c_bLastWxPollError                                      ' True if last poll raised an error
Dim c_iLastWxPollErrNumber                                  ' Last poll error code
Dim c_sLastWxPollErrMessage                                 ' Last poll error message
Dim c_dtLastRfPollTime
Dim c_bLastRfPollError                                      ' True if last poll raised an error
Dim c_iLastRfPollErrNumber                                  ' Last poll error code
Dim c_sLastRfPollErrMessage                                 ' Last poll error message

'
' Code outside of any Function or Sub is executed when this object is created.
'
c_sTraceFileName = Util.Prefs.LocalUser.DefaultLogDir & "\BGGSWeatherTrace.log"
Set c_oTraceFileStream = Nothing                           ' [sentinel]
c_sLogFileName = ""
c_sRoofFileName = ""
c_bConnected = False
c_dtLastWxPollTime = CDate(Now - #01:00:00#)               ' Force initial polls
c_dtLastRfPollTime = CDate(Now - #01:00:00#)

'
' Get the path to "My Documents" .. This should probably be Public Documents
' It's just used as the starting point for the file-open dialogs though.
'
Dim SH 
Set SH = CreateObject("Wscript.Shell")
c_sMyDocsFolder = SH.SpecialFolders("My Documents")
Set SH = Nothing                                            ' Release this now

'------------------------------------------------------------------------------
' Method SetupDialog()
'
' Parameters:   (none)
' Returns:      (nothing)
'
' Invokes the weather access setup dialog. I put in a file selection dialog,
' courtesy of ACP's Util object which you have use of automatically here.
'------------------------------------------------------------------------------
Sub SetupDialog()

    c_sLogFileName = Util.Profile.GetValue("Cloudwatcher", "\WXBGGSWeather", "") ' Try for previous selection
    If c_sLogFileName = "" Then
        FileDialog.InitialDirectory = c_sMyDocsFolder
    Else
        FileDialog.InitialDirectory = FSO.GetParentFolderName(c_sLogFileName)
    End If

    FileDialog.DialogTitle = "CloudWatcher CCDAP 4 log file"
    FileDialog.Filter = "Log files (*.log)|*.log|All files (*.*)|*.*"
    FileDialog.Flags = 4096                                 ' Guarantee file exists
    If FileDialog.ShowOpen() Then
        c_sLogFileName = FileDialog.FileName
        Util.Profile.WriteValue "Cloudwatcher", c_sLogFileName, "\WXBGGSWeather"
    End If
        
    c_sRoofFileName = Util.Profile.GetValue("RoofStatusFile", "\WXBGGSWeather", "") ' Try for previous selection
    If c_sRoofFileName = "" Then
        FileDialog.InitialDirectory = c_sMyDocsFolder
    Else
        FileDialog.InitialDirectory = FSO.GetParentFolderName(c_sRoofFileName)
    End If

    FileDialog.DialogTitle = "Select BGGS roof status file"
    FileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
    FileDialog.Flags = 4096                                 ' Guarantee file exists
    If FileDialog.ShowOpen() Then
        c_sRoofFileName = FileDialog.FileName
        Util.Profile.WriteValue "RoofStatusFile", c_sRoofFileName, "\WXBGGSWeather"
    End If
End Sub

'------------------------------------------------------------------------------
' Property Connected (R/W, REQUIRED)
'
' True means weather sensor is connected and operating (Boolean). 
' Set True to connect.
'------------------------------------------------------------------------------
' dim Connected									            ' PrimalScript UI target (typ.)
Function get_Connected()
    ' Return True if connected, else False
	get_Connected = c_bConnected
End Function

Function put_Connected(newValue)
    ' Code to establish or terminate the connection
    If newValue Then                                        ' Connecting
        Trace "Connecting"
        c_sLogFileName = Util.Profile.GetValue("Cloudwatcher", "\WXBGGSWeather", "")
        If c_sLogFileName = "" Then
    	    Fail &H80040401, "Cannot connect - CloudWatcher CCDAP 4 Log file has not been selected"
    	End If
        c_sRoofFileName = Util.Profile.GetValue("RoofStatusFile", "\WXBGGSWeather", "")
        If c_sRoofFileName = "" Then
    	    Fail &H80040401, "Cannot connect - BGGS roof status file has not been selected"
    	End If
    	Trace "Weather log is " & c_sLogFileName
    	Trace "Roof status is " & c_sRoofFileName
    	PollWxIf                                              ' Get initial data for check and model
    	PollRfIf                                              ' Get initial data for check and model
        c_bConnected = True
        Trace "Connected OK"
    Else
        Trace "Disconnecting & closing trace file"
        On Error Resume Next
        c_oTraceFileStream.Close
        On Error GoTo 0
        c_bConnected = False
    End If
End Function

'------------------------------------------------------------------------------
' Property AmbientTemperature (R/O, OPTIONAL)
'
' The ambient (outside) air temperature (Single, deg.C)
'------------------------------------------------------------------------------
' Dim AmbientTemperature
Function get_AmbientTemperature()
    PollWxIf
    get_AmbientTemperature = c_fAmbientTemp
End Function

'------------------------------------------------------------------------------
' Property BarometricPressure (R/O, OPTIONAL)
'
' The barometric pressure (Single, millibars)
' NOTE: This must be in millibars, per international aviation weather reporting
'       standards.
'------------------------------------------------------------------------------
' Dim BarometricPressure
Function get_BarometricPressure()
	Err.Raise &H80040400, PRP & "Get BarometricPressure" & NTI
End Function

'------------------------------------------------------------------------------
' Property Clouds (R/O, OPTIONAL)
'
' Cloud coverage (Single, fractional 0-1)
'------------------------------------------------------------------------------
' Dim Clouds
Function get_Clouds()
    PollWxIf
	Select Case c_iCloudCond
		Case cloudUnknown:
			Fail &H80040404, "No cloud data currently available"
		Case cloudClear:
			get_Clouds = 0.0
		Case cloudCloudy:
			get_Clouds = 0.5
		Case cloudVeryCloudy:
			get_Clouds = 1.0
		Case Else:
			Fail &H80040405, "Unknown cloud value from weather system"
	End Select
End Function

'------------------------------------------------------------------------------
' Property DewPoint (R/O, OPTIONAL)
'
' The dew point temperature (Single, deg C)
'------------------------------------------------------------------------------
' Dim DewPoint
Function get_DewPoint()
    PollWxIf
    get_DewPoint = c_fDewPoint
End Function

'------------------------------------------------------------------------------
' Property InsideTemperature (R/O, OPTIONAL)
'
' The temperature inside the observatory (Single, deg C)
'------------------------------------------------------------------------------
' Dim InsideTemperature
Function get_InsideTemperature()
	Fail &H80040400, PRP & "Get InsideTemperature" & NTI
End Function

'------------------------------------------------------------------------------
' Property Name (R/O, OPTIONAL)
'
' The display name of the weather system (String)
'------------------------------------------------------------------------------
' dim Name
Function get_Name()
    PollWxIf
    get_Name = "BGGS Roof Status & Weather System"
End Function

'------------------------------------------------------------------------------
' Property Precipitation (R/O, OPTIONAL)
'
' True if precipitation is present (Boolean)
'------------------------------------------------------------------------------
' Dim Precipitation
Function get_Precipitation()
    PollWxIf
    get_Precipitation = (c_iRainCond = rainRain)
End Function

'------------------------------------------------------------------------------
' Property RelativeHumidity (R/O, OPTIONAL)
'
' The relative humidity (Single, fractional 0-1)
'------------------------------------------------------------------------------
' Dim RelativeHumidity
Function get_RelativeHumidity()
    PollWxIf
    get_RelativeHumidity = c_fHumidity
End Function

'------------------------------------------------------------------------------
' Property Safe (R/O, REQUIRED)
'
' Return True when weather is safe, False when not. Returning False will
' stop any ACP script in progress and cause alarm and shutdown processes
' to be initiated.
'------------------------------------------------------------------------------
' dim Safe
Function get_Safe()
    Dim message
    ' WARNING: TRAP ERRORS HERE! Raised error on Safe property will kill ACP!
    On Error Resume Next
    PollRfIf
    If Err.Number <> 0 Then
        message = "Weather Unsafe! BGGS roof status file acquisition error:"
        message = message & vbCrLf & "  " & Err.Description
		Util.Console.PrintLine message
		Trace message
        get_Safe = False
        c_bLastSafe = False
        Exit Function
    End If
    On Error GoTo 0
    
	get_Safe = c_bBGGSRoofOpen
	If Not get_Safe And c_bLastSafe Then                ' If this is a change from safe to unsafe
		message = "Weather is unsafe, BGGS Roof has closed!"
		message = message & vbCrLf & "BGGS weather system currently reports:"
		If(c_iSecondsSinceData >= 60) Then
		    message = message & vbCrLf & "               No data from weather system for " & _
		  				CStr(c_iSecondsSinceData) & " sec."
		Else
    		If(c_iRainCond = rainUnknown) Then _
    		    message = message & vbCrLf & "               Rain sensor is not ready or broken"
    		If(c_iRainCond = rainRain) Then _
    		    message = message & vbCrLf & "               Rain condition is Rainy"
    		If(c_iWindCond < 0) Then _
    		    message = message & vbCrLf & "               Wind sensor is not ready or broken"
    		If(c_iWindCond = windVeryWindy) Then _
    		    message = message & vbCrLf & "               WindCondition is Very Windy"
    		If(c_iDayCond = dayUnknown) Then _
    		    message = message & vbCrLf & "               Daylight sensor is not ready or broken"
    		If(c_iDayCond = dayVeryLight) Then _
    		    message = message & vbCrLf & "               Daylight condition is Very Bright"
		End If
		Util.Console.PrintLine message
		Trace message
	End If
    
	c_bLastSafe = get_Safe
	
End Function

'------------------------------------------------------------------------------
' Property SkyTemperature (R/O, OPTIONAL)
'
' The sky temperature (Single, deg C)
'------------------------------------------------------------------------------
' Dim SkyTemperature
Function get_SkyTemperature()
    PollWxIf
	get_SkyTemperature = c_fSkyTemp
End Function

'------------------------------------------------------------------------------
' Property WindDirection (R/O, OPTIONAL)
'
' The azimuth FROM which the wind is blowing (Single, deg. magnetic)
' NOTE: This must be in degrees MAGNETIC, per international aviation weather 
'       reporting standards.
'------------------------------------------------------------------------------
' Dim WindDirection
Function get_WindDirection()
	Fail &H80040400, PRP & "Get WindDirection" & NTI
End Function

'------------------------------------------------------------------------------
' Property WindVelocity (R/O, OPTIONAL)
'
' The wind velocity (Single, knots)
'------------------------------------------------------------------------------
' Dim WindVelocity
Function get_WindVelocity()
    PollWxIf
    get_WindVelocity = c_fWindSpeed
End Function

' ===============
' Local Functions
' ===============

'------------------------------------------------------------------------------
' Sub PollWxIf()
'
' If the poll time has expired, attempt to read the one line from the AAG_CCDAP4_II 
' data file. If it is locked, wait 500ms and try again. Try 10 times then fail. 
' If succeeded, update the "last poll time". Then parse the file detecting the
' old vs new format (ote the "new" format is the old Boltwood/AAG format that lacks
' the last two flags. Not relevant here as the "alert" comes from the roof status.
'
'      0        1         2         3         4         5         6         7         8 
'      12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
'      -----------------------------------------------------------------------------------------
' new: 2005-06-03 02:07:23.34 C K -28.5 18.7 22.5 45.3 75 10.3 3 0 0 00004 038506.08846 1 2 1 1
'
' Raises error if something isn't right
'------------------------------------------------------------------------------
Sub PollWxIf()
    Dim S, L, F, i, buf, bits, mph, faren, curLocale, RX
    
    '
    ' If not actually polling the file, we need to re-create any raised
    ' error that happened lasat time we polled. THis way the rest of the
    ' server has no idea we didn't really read the info, and just uses what
    ' was there last time. These globals are set in the special PollFail()
    '
    If (Now - c_dtLastWxPollTime) < POLL_INT Then 
        If c_bLastWxPollError Then Err.Raise c_iLastWxPollErrNumber, ERR_SOURCE, c_sLastWxPollErrMessage
        Exit Sub
    End If
    '
    ' Going to poll for real
    '
    c_dtLastWxPollTime = Now                                ' Update last poll time
    c_bLastWxPollError = False                              ' Forget any raised error from last poll

    If Not FSO.FileExists(c_sLogFileName) Then              ' Catch vaporized Boltwood file
        c_dtLastWxPollTime = Now                            ' Keep poll interval for possible long delay (NetBIOS)
        PollWxFail &H80040407, "The weather data file doesn't exist!"
    End If
    
    '
    ' Read and process the Boltwood/Clarity file
    ' Locking logic thanks to Rob Hawley (see GEM:1383)
    '
    On Error Resume Next
    For i = 0 To 19                                         ' Try twice a sec. for 10 sec.
        Set L = FSO.OpenTextFile(c_sLogFileName, 8)         ' Lock the file for writing (using append)
        If Err.Number = 0 Then 
            Set S = FSO.OpenTextFile(c_sLogFileName, 1)     ' also resets pointer to start of file
            If Err.Number = 0 Then 
                buf = S.ReadLine                            ' OK We have the file open. Read the data line
                If Err.Number = 0 Then
                    Trace "Success reading weather data file (" & i & "):"
                    Trace buf
                    S.Close                                 ' And close it right away
                    L.Close
                    Exit For
                Else
                    buf = Err.Description
                    Trace "Can't read weather data file (" & i & ") " & buf
                    S.Close
                    L.Close
                End If
            Else
                buf = Err.Description
                Trace "Can't open weather data file for read (" & i & ") " & buf
                L.Close
            End If
         Else
            Trace "Can't lock weather data file for write (" & i & ") " & buf
            buf = Err.Description
        End If
        Err.Clear
        Util.WaitForMilliseconds 500
    Next    
    On Error GoTo 0                                         ' Re-arm trapping 
    If i >= 19 Then 
        c_dtLastWxPollTime = Now                              ' Keep poll interval for possible long delay (NetBIOS)
        PollWxFail &H80040401, "Failed to open or read weather data file" & _
                    "  (last error: " & buf & ")"
    End If
    
    '
    ' Boltwood always puts out . for decimal point, temporarily switch locale to en-us
    '
    curLocale = GetLocale()
    SetLocale("en-us")
    '
    ' Interpret log file. 
    '
    Set RX = New RegExp                                     ' Compress runs of whitespace
    RX.Pattern = " +"
    RX.Global = True
    buf = RX.Replace(buf, " ")
    bits = Split(buf, " ")                                  ' Now just split on space
    If UBound(bits) > 16 Then                               ' BGGS system makes Clarity II format file
        faren = (UCase(bits(2)) = "F")
        mph = (UCase(bits(3)) = "M")
        c_fSkyTemp = CSng(bits(4))
        If faren Then
            c_fSkyTemp = (c_fSkyTemp - 32) * 5 / 9          ' Convert F to C if needed (typ.)
        End If
        c_fAmbientTemp = CSng(bits(5))
        If faren Then
            c_fAmbientTemp = (c_fAmbientTemp - 32) * 5 / 9
        End If
        c_fWindSpeed = CSng(bits(7))
        If mph Then
            c_fWindSpeed = 0.8688 * c_fWindSpeed            ' Convert miles/hr to knots
        Else
            c_fWindSpeed = 0.5400 * c_fWindSpeed            ' Convert km/hr to knots
        End If
        c_fHumidity = CSng(bits(8)) / 100                   ' Humidity, frac (0-1)
        c_fDewPoint = CSng(bits(9))                         ' Dew point temp
        If faren Then                                       ' Convert F to C if needed
            c_fDewPoint = (c_fDewPoint - 32) * 5 / 9
        End If
        c_iRainFlag = CInt(bits(11))
        c_iWetFlag = CInt(bits(12))
        c_iSecondsSinceData = CInt(bits(13))
        'c_dtLastLogTime = CDate(bits(14))
        c_dtLastLogTime = CDate(bits(0) & " " & Left(bits(1), 8)) ' Remove decimals from seconds
        c_iCloudCond = CInt(bits(15))
        c_iWindCond = CInt(bits(16))
        c_iRainCond = CInt(bits(17))
        c_iDayCond = CInt(bits(18))
    Else                                                    ' Some sort of bogus data line
        SetLocale curLocale
        Fail &H80040402, "Weather data file does not contain valid data"
    End If
    SetLocale curLocale                                     ' Restore locale
    '
    ' Signal that our data is really no good
    '
    If (Now - c_dtLastLogTime) > #00:01:00# Then
        PollWxFail &H80040402, "Weather data file is stale (> 60 sec old)"
    End If
    If c_iSecondsSinceData > 60 Then
        PollWxFail &H80040402, "No weather data from Boltwood for > 60 sec"
    End If
End Sub

'------------------------------------------------------------------------------
' Sub PollRfIf()
'
' BGGS roof data file (12/2017):
'
' 0        1         2         3         4         5         6         7         8         
' 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
' -----------------------------------------------------------------------------------------
' 2017-02-25 12:24:06 AM,1,True,False,True
'
' Second field numeric:
'   roofopen = 0
'   roofclosed = 1
'   roofopening = 2
'   roofclosing = 3
'   roofError = 4
'   roofunknown = 5
'   roofstopped = 6
' 
' Raises error if there's a problem
'------------------------------------------------------------------------------
Sub PollRfIf()
    Dim i, buf, bits, L, S
    '
    ' If not actually polling the file, we need to re-create any raised
    ' error that happened last time we polled. THis way the rest of the
    ' server has no idea we didn't really read the info, and just uses what
    ' was there last time. These globals are set in the special PollFail()
    '
    If (Now - c_dtLastRfPollTime) < POLL_INT Then 
        If c_bLastRfPollError Then Err.Raise c_iLastRfPollErrNumber, ERR_SOURCE, c_sLastRfPollErrMessage
        Exit Sub
    End If
    '
    ' Going to poll for real
    '
    c_dtLastRfPollTime = Now                                ' Update last poll time
    c_bLastRfPollError = False                              ' Forget any raised error from last poll

    '
    ' Read and process the BGGS roof status file. This updates the "last poll"
    ' Before reading, check the last-modified date to make sure data is fresh enough
    '
    '======================
    c_bBGGSRoofOpen = False ' ASSUME FAILURE -> UNSAFE
    '======================
    If Not FSO.FileExists(c_sRoofFileName) Then             ' Catch vaporized BGGS roof file
        c_dtLastRfPollTime = Now                            ' Keep poll interval for possible long delay (NetBIOS)
        PollRfFail &H80040407, "The BGGS roof status file doesn't exist"
    End If
   
    '
    ' Read and process the BGGS Roof Status file
    ' Locking logic thanks to Rob Hawley (see GEM:1383)
    '
    On Error Resume Next
    For i = 0 To 19                                         ' Try twice a sec. for 10 sec.
        Set L = FSO.OpenTextFile(c_sRoofFileName, 8)        ' Lock the file for writing (using append)
        If Err.Number = 0 Then 
            Set S = FSO.OpenTextFile(c_sRoofFileName, 1)    ' also resets pointer to start of file
            If Err.Number = 0 Then 
                S.ReadLine                                  ' OK We have the file open. Read the header line ...
                buf = S.ReadLine                            ' ... and now the live data line
                If Err.Number = 0 Then
                    Trace "Success reading BGGS roof file (" & i & ") " & buf
                    Trace buf
                    S.Close                                 ' And close it right away
                    L.Close
                    Exit For
                Else
                    buf = Err.Description
                    Trace "Can't read BGGS roof file (" & i & ") " & buf
                    S.Close
                    L.Close
                End If
            Else
                buf = Err.Description
                Trace "Can't open BGGS roof file for read (" & i & ") " & buf
                L.Close
            End If
        Else
            buf = Err.Description
            Trace "Can't lock BGGS roof file for write (" & i & ") " & buf
        End If
        Err.Clear
        Util.WaitForMilliseconds 500
    Next    
    On Error GoTo 0                                         ' Re-arm trapping 
    If i >= 19 Then
        c_dtLastRfPollTime = Now                            ' Keep poll interval for possible long delay (NetBIOS)
        PollRfFail  &H80040401, "Failed to open or read the BGGS roof status file" & _
            vbCrLf & "  (last error: " & buf & ")"
    End If
    '
    ' Interpret the log file
    '
    bits = Split(buf, ",")
    If UBound(bits) = 2 Then
        Trace bits(0) & " " & bits(1)
        c_dtLastRoofTime = CDate(bits(0) & " " & bits(1))
        If (Now - c_dtLastRoofTime) > #00:03:00# Then
            S.Close
            L.Close
            PollRfFail &H80040402, "Roof status data is stale (> 180 sec old)"    ' Roof updated every 60 sec
        End If
        c_bBGGSRoofOpen = (LCase(bits(2)) = "open")         ' Anything but open is not desireable
    Else
        buf = "Incomplete data in BGGS roof file"
        Trace buf & " ( looped " & i + 1 & " above)"
    End If

End Sub

'
' Log a message into the trace file (ever appending)
'
Sub Trace(message)
    If Not DIAG_TRACE Then Exit Sub
    
    If c_oTraceFileStream Is Nothing Then
        If FSO.FileExists(c_sTraceFileName) Then FSO.DeleteFile c_sTraceFileName    ' Start with fresh file
        Set c_oTraceFileStream = FSO.OpenTextFile(c_sTraceFileName, 8, True)        ' CreateIf, for Append
        c_oTraceFileStream.Write Util.FormatVar(Util.SysUTCDate, "Hh:Nn:Ss") & " Log opened, server " & SVR_VERSION
    End If   
    c_oTraceFileStream.Write Util.FormatVar(Util.SysUTCDate, "Hh:Nn:Ss") & " "
    c_oTraceFileStream.WriteLine message
End Sub

'
' Raise an error and trace the error message as well
'
Sub Fail (code, message)
    Trace "ERROR: " & message
    Err.Raise code, ERR_SOURCE, message
End Sub
'
' Special version that saves the number and message for raising
' errors between polls of the weather file.
'
Sub PollWxFail (code, message)
    c_bLastWxPollError = True                                   ' Result of last real poll
    c_iLastWxPollErrNumber = code
    c_sLastWxPollErrMessage = message
    Trace "ERROR (WX): " & message
    Err.Raise code, ERR_SOURCE, message
End Sub
'
' Special version that saves the number and message for raising
' errors between polls of the roof status file.
'
Sub PollRfFail (code, message)
    c_bLastRfPollError = True                                   ' Result of last real poll
    c_iLastRfPollErrNumber = code
    c_sLastRfPollErrMessage = message
    Trace "ERROR (RF): " & message
    Err.Raise code, ERR_SOURCE, message
End Sub
]]>
		</script>
	</component>
</package>
