<?xml version="1.0" ?>
<package>
	<comment>
<![CDATA[
'tabs=4
-----------------------------------------------------------------------------------------

ACP Weather Access For Deep Sky Chile
=====================================

Script:         DeepSkyChileWeather.wsc
Author:         Robert B. Denny <rdenny@dc3.com>
Version:        8.2
Requires:       ACP 8.2 or later
                Windows Script 5.6 or later 

Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                provides ACP and its scripts with Weather information. This component
                is responsible for providing the interface with the weather sensor. You
                May use the ASCOM Serial device to communicate via RS-232 or if the 
                weather sensor has an ActiveX/Scriptable interface, you may create an
                instance of the object, and call directly into that interface.

Edit History:
    08-May-19   Initial Edit, from template
-----------------------------------------------------------------------------------------
]]>
	</comment>
	<component id="DSCWeather">
		<?component error="false" debug="false" ?>
		<registration progid="ACP.DSCWeather" classid="{FB36F769-A6DF-4CF8-8478-DD425F1C38B9}" description="ACP Weather Server for Deep Sky Chile" remotable="no" version="1.0">
		</registration>
		<public>
			<method name="SetupDialog">
			</method>
			<property name="Connected">
				<get/>
				'<put/>
			</property>
			<property name="AmbientTemperature">
				<get/>
			</property>
			<property name="BarometricPressure">
				<get/>
			</property>
			<property name="Clouds">
				<get/>
			</property>
			<property name="DewPoint">
				<get/>
			</property>
			<property name="InsideTemperature">
				<get/>
			</property>
			<property name="Name">
				<get/>
			</property>
			<property name="Precipitation">
				<get/>
			</property>
			<property name="RelativeHumidity">
				<get/>
			</property>
			<property name="Safe">
				<get/>
			</property>
			<property name="SkyTemperature">
				<get/>
			</property>
			<property name="WindDirection">
				<get/>
			</property>
			<property name="WindVelocity">
				<get/>
			</property>
		</public>
		<object id="Util" progid="ACP.Util" events="false" reference="true"/>
		<object id="FSO" progid="Scripting.FileSystemObject" events="false" reference="false"/>
		<script id="WeatherAccess" language="VBScript">
<![CDATA[
Option Explicit

Const SVR_VERSION = "8.2.1"
Const ERR_SOURCE = "ACP.DSCWeather"
Const PRP = "Property "				' Common bits for error messages
Const NTI = " is not implemented"

'
' Turn this on to have detailed tracing to a log file
'
Const DIAG_TRACE = True


'
' State variables
'

'
' Trace file goes into (nominally) My DOcuments\ACP Astronomy\Logs\DSC_WeatherTrace.log
'
Dim c_sTraceFileName                                        ' Full path to trace diagnostic log file
Dim c_oTraceFileStream                                      ' Text stream into which trace info is written
Dim c_bConnected                                            ' Fake connected variable
Dim c_HttpReq                                               ' Object (re)used for HTTP requests


'
' Code outside of any Function or Sub is executed when this object is created.
'
c_bConnected = False
Set c_HttpReq = CreateObject("Msxml2.XMLHTTP")
c_sTraceFileName = Util.Prefs.LocalUser.DefaultLogDir & "\DSC_WeatherTrace.log"
Set c_oTraceFileStream = Nothing


'------------------------------------------------------------------------------
' Method SetupDialog()  (OPTIONAL)
'
' Parameters:   (none)
' Returns:      (nothing)
'
' Invokes the weather access setup dialog
'------------------------------------------------------------------------------
Sub SetupDialog()
    Util.MessageBox "Deep Sky Chile Weather Input\r\nSafe indication based on Obs 1 roof"
End Sub

'------------------------------------------------------------------------------
' Property c_bConnected (R/W, REQUIRED)
'
' True means weather sensor is c_bConnected and operating (Boolean). 
' Set True to connect.
'------------------------------------------------------------------------------
' Dim c_bConnected
Function get_Connected()
    get_Connected = c_bConnected
End Function

Function put_Connected(newValue)
    c_bConnected = newValue
    If newValue Then
        Trace "ACP connected to weather"
    Else
        Trace "ACP disconnected from weather"
    End If
End Function

'------------------------------------------------------------------------------
' Property AmbientTemperature (R/O, OPTIONAL)
'
' The ambient (outside) air temperature (Single, deg.C)
'------------------------------------------------------------------------------
' Dim AmbientTemperature
Function get_AmbientTemperature()
    ' Replace this with code to implement this Property
	Trace "AmbientTemperature Test"
	'Err.Raise &H80040400, ERR_SOURCE, PRP & "Get AmbientTemperature" & NTI
End Function

'------------------------------------------------------------------------------
' Property BarometricPressure (R/O, OPTIONAL)
'
' The barometric pressure (Single, millibars)
' NOTE: This must be in millibars, per international aviation weather reporting
'       standards.
'------------------------------------------------------------------------------
' Dim BarometricPressure
Function get_BarometricPressure()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get BarometricPressure" & NTI
End Function

'------------------------------------------------------------------------------
' Property Clouds (R/O, OPTIONAL)
'
' Cloud coverage (Single, fractional 0-1)
'------------------------------------------------------------------------------
' Dim Clouds
Function get_Clouds()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get Clouds" & NTI
End Function

'------------------------------------------------------------------------------
' Property DewPoint (R/O, OPTIONAL)
'
' The dew point temperature (Single, deg C)
'------------------------------------------------------------------------------
' Dim DewPoint
Function get_DewPoint()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get DewPoint" & NTI
End Function

'------------------------------------------------------------------------------
' Property InsideTemperature (R/O, OPTIONAL)
'
' The temperature inside the observatory (Single, deg C)
'------------------------------------------------------------------------------
' Dim InsideTemperature
Function get_InsideTemperature()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get InsideTemperature" & NTI
End Function

'------------------------------------------------------------------------------
' Property Name (R/O, OPTIONAL)
'
' The display name of the weather system (String)
'------------------------------------------------------------------------------
' dim Name
Function get_Name()
    ' Replace this with code to implement this Property
	Trace "Get Name Test"
	'Err.Raise &H80040400, ERR_SOURCE, PRP & "Get Name" & NTI
End Function

'------------------------------------------------------------------------------
' Property Precipitation (R/O, OPTIONAL)
'
' True if precipitation is present (Boolean)
'------------------------------------------------------------------------------
' Dim Precipitation
Function get_Precipitation()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get Precipitation" & NTI
End Function

'------------------------------------------------------------------------------
' Property RelativeHumidity (R/O, OPTIONAL)
'
' The relative humidity (Single, fractional 0-1)
'------------------------------------------------------------------------------
' Dim RelativeHumidity
Function get_RelativeHumidity()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get RelativeHumidity" & NTI
End Function

'------------------------------------------------------------------------------
' Property Safe (R/O, REQUIRED)
'
' Return True when weather is safe, False when not. Returning False will
' stop any ACP script in progress and cause alarm and shutdown processes
' to be initiated. Raised error here will kill ACP!!!
'------------------------------------------------------------------------------
' dim Safe
Function get_Safe()
    Dim rx
    
    get_Safe = False
    On Error Resume Next
    c_HttpReq.Open "GET", "http://clients.deepskychile.com/roofstatus.php?obs=1", False
    c_HttpReq.Send
    If Err.Number = 0 Then
        Set rx = New RegExp                     ' The response has severaltabs
        rx.Pattern = "\s*"                      ' Trim() doesn't get rid of tabs, etc. 
        rx.Global = True
        Select Case rx.Replace(LCase(c_HttpReq.responseText), "")
            Case "open": get_Safe = True        ' Only explicit 'open' means safe
            Case "closed":                      ' Assumed unsafe above
            Default:
                Trace "**Unexpected response """ + resp + """ ... assuming unsafe!"
        End Select
    Else
        Trace "** Failed to retrieve Deep Sky Chile roof #1 Status, assuming unsafe!"
        Trace "Error: " & Err. Message
    End If
    
 End Function

'------------------------------------------------------------------------------
' Property SkyTemperature (R/O, OPTIONAL)
'
' The sky temperature (Single, deg C)
'------------------------------------------------------------------------------
' Dim SkyTemperature
Function get_SkyTemperature()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get SkyTemperature" & NTI
End Function

'------------------------------------------------------------------------------
' Property WindDirection (R/O, OPTIONAL)
'
' The azimuth FROM which the wind is blowing (Single, deg. magnetic)
' NOTE: This must be in degrees MAGNETIC, per international aviation weather 
'       reporting standards.
'------------------------------------------------------------------------------
' Dim WindDirection
Function get_WindDirection()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get WindDirection" & NTI
End Function

'------------------------------------------------------------------------------
' Property WindVelocity (R/O, OPTIONAL)
'
' The wind velocity (knots)
' NOTE: This must be in degrees MAGNETIC, per international aviation weather 
'       reporting standards.
'------------------------------------------------------------------------------
' Dim WindVelocity
Function get_WindVelocity()
    ' Replace this with code to implement this Property
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get WindVelocity" & NTI
End Function


'
' Log a message into the trace file (ever appending)
'
Sub Trace(message)
    If Not DIAG_TRACE Then Exit Sub
    
    If c_oTraceFileStream Is Nothing Then
        If FSO.FileExists(c_sTraceFileName) Then FSO.DeleteFile c_sTraceFileName    ' Start with fresh file
        Set c_oTraceFileStream = FSO.OpenTextFile(c_sTraceFileName, 8, True)        ' CreateIf, for Append
        c_oTraceFileStream.WriteLine Util.FormatVar(Util.SysUTCDate, "Hh:Nn:Ss") & " Log opened, server " & SVR_VERSION
    End If   
    c_oTraceFileStream.Write Util.FormatVar(Util.SysUTCDate, "Hh:Nn:Ss") & " "
    c_oTraceFileStream.WriteLine message
End Sub
]]>
		</script>
	</component>
</package>
